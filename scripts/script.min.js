angular.module( 'ngApp', [ 'ngRoute'])

.filter('range', function() {
	return function(val, range) {
		range = parseInt(range);
		for (var i=range; i>0; i--)
		val.push(i);
		return val;
	};
})

.filter('humanize', function () {
	return function (text) {
		if (text) {
			var string = text.replace(/([A-Z])/g, ' $1').toLowerCase();
				// Not sure why this isn't working (does uppercase Trainer, does not format combat options)
				// string = text.replace(/([-])(.)/g, function (m, m1, m2, p) { return ' ' + m2.toUpperCase(); } );
				string = string.charAt(0).toUpperCase() + string.slice(1);
			return string;
		}
	};
})

.config(function ($routeProvider, $locationProvider) {
	// $locationProvider.html5Mode(true);
	$routeProvider
	.when('/:personality/:class/:profession', {
		templateUrl: 'templates/main.html'
	})
	.otherwise({
		templateUrl: 'templates/main.html'
	});
})

.run(function($rootScope) {
	FastClick.attach(document.body);

	$rootScope.user = {
		name: '',
		personality: '',
		class: '',
		profession: '',
		combat: "",
		energy: [ true, true, true, true, true, true, true, true, true, true],
		die: 0
	};

	$rootScope.simpleQuest = {
		'personalities' : ['passionate','wild', 'calculating', 'righteous', 'selfish'],
		'classes' : ['wizard', 'sage', 'fighter', 'marksman'],
		'professions' : ['animal-trainer', 'criminal', 'diplomat', 'merchant', 'performer', 'priest', 'scout', 'soldier', 'tinkerer', 'warlock'],
		'statuses' : ['inGeneral', 'inCombat', 'outOfCombat']
	};
})

.controller ('appController', function ($scope, $rootScope, $routeParams, $location) {
	$rootScope.user.personality = $routeParams.personality;
	$rootScope.user.class = $routeParams.class;
	$rootScope.user.profession = $routeParams.profession;
	console.log($routeParams);

	$scope.getMarkdown = function (category) {
		if (category == 'class' && $rootScope.user.class)	{ return 'content/classes/' + $rootScope.user.class + '.md'; }
		else if ( category == 'profession' && $rootScope.user.profession) { return 'content/professions/' + $rootScope.user.profession + '.md'; }
	};

	$scope.resetCharacter = function () {
		window.location.reload();
	};

	$scope.energyChange = function (e)
	{
		for (var i = 0; i < e; i++) {
			$rootScope.user.energy[i] = true;
		}

		for (var j = 9; j > e; j--) {
			$rootScope.user.energy[j] = false;
		}
	};

	$scope.diceBagRoll = function () {
		var result = Math.ceil(Math.random()*$rootScope.user.die).toString();
		alertify.alert(result);
		$rootScope.user.die = 0;
	};

	$scope.inlineRoll = function (d) {
		event.stopPropagation();
		d = parseInt(d.replace(/[dD]/g,''));
		var result = Math.ceil(Math.random()*d).toString();

		alertify .alert(result);
	};
})

.directive('die', function($compile) {
	return {
		restrict: 'E',
		replace: 'true',
		link: function ($scope, $elem, attr) {
			var html =  '<span class="die" ng-click="inlineRoll(\'' + $elem.text().toString() + '\')">' + $elem.text() + '</span>';
			$compile(html)($scope, function(elem) { $elem.replaceWith(elem); });
		}
	};
})

.directive('md', function ($compile) {
	return {
		restrict: 'E',
		replace: 'false',
		link: function ($scope, $elem, attr) {
			var html = '<temp>' + marked($elem.text()) + "</temp>";
			var obj = $( html );
			var elementId = $elem[0].id;

			if ( elementId == "attributesWrap") {
				obj.children('h1').each( function( )
				{
					var elemId = $(this)[0].id;
					$(this).nextUntil("h1").andSelf().wrapAll('<div class="card" ng-if="user.personality == \'' + elemId +'\' || user.class == \'' + elemId +'\' || user.profession == \'' + elemId +'\'"><div class="always minified" onClick="toggle(this, \'minified\')" />');
				});
			}
			else if(elementId == "classesWrap") {
				obj.children('h1').each( function( )
				{
					var c = $scope.user.class;
					$(this).nextUntil("h1").andSelf().wrapAll('<div class="card" ng-show="user.combat !== \'inGeneral\' && user.class == \'' + c +'\'"/>');
				});
				obj.children().each( function( )
				{
					$(this).find('h1').nextUntil("h2").andSelf().wrapAll('<div class="inCombat minified" ng-show="user.combat == \'inCombat\'" onClick="toggle(this, \'minified\')"/>');
					$(this).find('h2').nextUntil("div").andSelf().wrapAll('<div class="outOfCombat minified" ng-show="user.combat == \'outOfCombat\'" onClick="toggle(this, \'minified\')"/>');
				});
			}
			else if(elementId == "professionsWrap"){
				obj.children('h1').each( function( )
				{
					var p = $scope.user.profession;
					$(this).nextUntil("h1").andSelf().wrapAll('<div class="card" ng-show="user.combat !== \'inGeneral\' && user.profession == \'' + p +'\'" />');

				});
				obj.children().each( function( )
				{
					$(this).find('h1').nextUntil("h2").andSelf().wrapAll('<div class="inCombat minified" ng-show="user.combat == \'inCombat\'" onClick="toggle(this, \'minified\')"/>');
					$(this).find('h2').nextUntil("div").andSelf().wrapAll('<div class="outOfCombat minified" ng-show="user.combat == \'outOfCombat\'" onClick="toggle(this, \'minified\')"/>');
				});
			}
			else if(elementId == "generalWrap"){
				obj.children('h1').each( function( )
				{
					$(this).nextUntil("h1").andSelf().wrapAll('<div class="card" ng-show="user.combat == \'inGeneral\'"><div class="inGeneral minified" onClick="toggle(this, \'minified\')"/>');
				});
			}

			var startFindingText = function (x) {
				var findText = function (element, pattern, callback) {
					if(element !== undefined)
					{
						for (var childi= element.childNodes.length; childi-->0;) {
							var child= element.childNodes[childi];
							if (child.nodeType==1) {
								findText(child, pattern, callback);
							}
							else if (child.nodeType==3) {
								var matches = [];
								var match;
								while (match = pattern.exec(child.data)){
									matches.push(match);
								}
								for (var i = matches.length; i-->0;){
									callback.call(window, child, matches[i]);
								}
							}
						}
					}
				};

				findText(x[0],/[Dd][0-9]+/g, function(node, match) {
					var wrap = document.createElement('die');

					node.splitText(match.index+match[0].length);
					wrap.appendChild(node.splitText(match.index));
					node.parentNode.insertBefore(wrap, node.nextSibling);
				});

				return(x);
			};


			html = "<div id='" + elementId + "'>" + startFindingText(obj).html() + "</div>";
			// is there an alternative to .replaceWidth, so I don't have to call window.reload() to remove sticky cards?
			$compile(html)($scope, function(elem) { $elem.replaceWith(elem); });
		}
	};
});

var toggle = function (elem, c)
{
	$(elem).toggleClass(c);
};